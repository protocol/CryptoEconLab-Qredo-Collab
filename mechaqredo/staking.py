import numpy as npclass staking_in:    def __init__(self, model: str,                 slippage:float=0,                 tipping_rate:float=0,                 reward_locking:float=0,                 initial_staking_fees:float=0,                 initial_staking_stakers:float=0,                 staked_amount_constant:float=None,                 rate:float=None,                 distr:callable=None,                 fun:callable=None):                self.staking_fees_list=[initial_staking_fees]        self.staking_stakers_list=[initial_staking_stakers]        self.staking_in_list=[self.staking_fees_list[-1]+self.staking_stakers_list[-1]]        self.staking_rewards_list=[0]            def update_staking_fees_list(self,serviceFees,Price):        price=Price.current_price()        service_fees=serviceFees.current_fees()        L_in=service_fees*(1-self.slippage)*(self.tipping_rate)/price        self.staking_fees_list.append(L_in)                    def update_staking_rewards_list(self,rewards,relock_rate=None):        if relock_rate is None:            relock_rate=np.random.random()        self.staking_rewards_list.append(relock_rate*rewards)    def update_staking_in_stakers(self):                t=len(self.staking_stakers_list)                if self.model == 'constant':            self.staking_stakers_list.append(self.staked_amount_constant)        elif self.model == 'linear':            self.staking_stakers_list.append((self.rate * t + self.staking_stakers_list[0]))        elif self.model == 'scheduled':            self.staking_stakers_list.append(self.schedule[t])        elif self.model == 'distr':            self.staking_stakers_list.append(self.distr())        elif self.model=='function':            self.staking_stakers_list.append(self.fun(t))                    def update(self,serviceFees,price,rewards,relock_rate):        """        Update the staked model        """                #updates the staking fees        self.update_staking_fees_list(serviceFees,price)        self.update_staking_rewards_list(self,rewards,relock_rate)        self.update_staking_in_stakers(self)                self.staking_in_list=[self.staking_fees_list[-1]+                              self.staking_stakers_list[-1]+                              self.staking_rewards_list[-1]]    def current_locked_in(self):        return self.staking_in_list[-1]        def current_fees(self):        return self.staking_fees_list[-1]        def current_rewards(self):        return self.staking_rewards_list[-1]        def current_stakers(self):        return self.staking_stakers_list[-1]                                            